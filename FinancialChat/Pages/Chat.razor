@using FinancialChat.Bussiness.ChatBot
@using FinancialChat.Components.ChatGroupItem
@using FinancialChat.Components.ChatGroupList
@using FinancialChat.Components.ChatMessageList
@using FinancialChat.Core.Entities
@using FinancialChat.Core.Repositories
@using FinancialChat.Bussiness.Services
@using FinancialChat.State
@using Microsoft.AspNetCore.SignalR.Client
@using FinancialChat.Core.Entities.Extensions;
@using Microsoft.JSInterop
@implements IDisposable
@inject NavigationManager NavManager
@inject AppState AppState
@inject IChatRoomRepository RoomsRepository
@inject IChatMessageRepository MessagesRepository
@inject FinancialChatHubService ChatHubService
@inject StockDataMessageProducer StockMessage;
@inject IJSRuntime JS


<PageTitle>Financial Chat @AppState?.ActiveRoom?.Name</PageTitle>

<div class="container">
    <div class="row clearfix">
        <div class="col-lg-12">
            <div class="card chat-app">
                <ChatGroupList Rooms="Rooms" OnChatRoomListChanged="GetChatRoomList" />
                <div class="chat">
                    <div class="chat-header clearfix">
                        @if (AppState?.ActiveRoom != null)
                        {
                            <ChatGroupItem Group="AppState?.ActiveRoom" />
                        }
                    </div>
                    <div class="chat-history" @ref="ChatHistoryRef">
                        @if (AppState?.ActiveRoom != null)
                        {
                            <ChatMessageList Messages="Messages" />
                        }
                    </div>
                    @if (AppState?.ActiveRoom != null)
                    {
                        <div class="chat-message clearfix">
                            <div class="input-group mb-0">
                                <input @bind-value="MessageText" @onkeyup="OnMessageTextKey" type="text" class="form-control" placeholder="Enter text here...">
                                <span @onclick="SendMessage" class="input-group-text"><i class="fa fa-send"></i></span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private IEnumerable<ChatRoom> Rooms;
    private List<ChatMessage> Messages;
    private string MessageText;
    private HubConnection hub;
    ElementReference ChatHistoryRef;

    protected override async Task OnInitializedAsync()
    {
        AppState.OnChangeActiveRoom += ActiveRoomChanged;
        //Get groups Info
        await GetChatRoomList();

        //Connect
        hub = await ChatHubService.Start();
        hub.On<ChatMessage>("ReceiveMessage", ReceiveMessage);
    }

    public async Task GetChatRoomList()
    {
        Rooms = await RoomsRepository.GetAll();
        if (AppState?.ActiveRoom?.Id != null)
        {
            AppState.SetActiveRoom(Rooms.FirstOrDefault(r => r.Id == AppState.ActiveRoom.Id));
        }
    }

    private async Task GetChatMessageList(int roomId)
    {
        if (AppState?.ActiveRoom != null)
        {
            Messages = (await MessagesRepository.GetByRoom(roomId)).ToList();
            await InvokeAsync(StateHasChanged);
            await ScrollToEnd();
        }
    }

    public async Task OnMessageTextKey(KeyboardEventArgs evt)
    {
        if (evt.Code == "Enter" || evt.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    } 

    public async Task SendMessage()
    {
        var msg = new ChatMessage
            {
                Date = DateTime.Now,
                Message = MessageText,
                RoomId = AppState.ActiveRoom.Id,
                User = AppState.CurrentUser
            };
        if (msg.GetStockName().Length > 0)
        {
            StockMessage.SendMessage(msg);
        }
        else
        {
            msg = await MessagesRepository.Insert(msg);
            await ChatHubService.SendMessage(msg);
        }
        MessageText = "";
    }

    private async Task ReceiveMessage(ChatMessage message)
    {
        Messages.Add(message);
        await InvokeAsync(StateHasChanged);
        await ScrollToEnd();
    }

    public async void ActiveRoomChanged(ChatRoom? previous, ChatRoom current)
    {
        if (previous != null)
        {
            await ChatHubService.LeaveGroup(previous.Id);
        }
        await ChatHubService.JoinGroup(current.Id);
        await InvokeAsync(StateHasChanged);
        await GetChatMessageList(current.Id);
    }

    private async Task ScrollToEnd()
    {
        await JS.InvokeVoidAsync("scrollToEnd", new object[] { ChatHistoryRef });
    }

    public void Dispose()
    {
        AppState.OnChangeActiveRoom -= ActiveRoomChanged;
    }
}
